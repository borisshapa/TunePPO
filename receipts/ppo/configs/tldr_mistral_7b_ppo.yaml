# Config for single device RLHF (Q)LoRA PPO finetuning of Mistral 7B model.
#
# This config uses hyperparameters based on small set of experiments and information
# available from existing implementations.
#
# This config assumes that you've run the following commands before launching
# this run: (take a look what prefix is down the config)
# 1. Download a reward model
#   a. (TLDR-SmallSFT-RM) tune download RLHF-And-Friends/TLDR-Mistral-7B-SmallSFT-RM --output-dir ~/.tune/models/TLDR-Mistral-7B-SmallSFT-RM/
# 2. Get Mistral-7B model
#   a. (Base) tune download mistral-community/Mistral-7B-v0.2 --output-dir ~/.tune/models/Mistral-7B-Base/
#
# You'll also need to ensure that {output_dir} exists beforehand, as checkpoints for policy and
# value models as well as WandBLogger logs are saved in sub-folders.
#
# To launch on N devices (starting from 1), run the following command from repo root:
#   tune run --nproc_per_node N receipts/ppo/ppo.py --config receipts/ppo/configs/tldr_mistral_7b_ppo.yaml
#
# To use arbiters from 'OpenAI' or 'deepinfra' set the environment variable in advance:
# export OPENAI_API_KEY=<your API key>.
# Use this variable even if you use deepinfra.
#
# NOTE: Do not override from CLI variables other variables depend on. The dependants would not be
# updated.


prefix: /data

project: TLDR-BS
group: Mistral-Base-PPO
model: Mistral-7B-Base
reward: TLDR-Mistral-7B-SmallSFT-RM
run: PPO

output_dir: ${prefix}/checkpoints/${project}/${group}/${model}-${run}

seed: 0xD1CE

# Notable relations for further reference
#
# (1) total_steps = dataloader.num_steps * dataloader.num_epochs
# e.g for learning rate scheduling
# (2) num_forward_steps = dataloader.batch_size / forward_batch_size * total_steps
# e.g. for in-reward kl_coeff scheduling
# (3) num_communcation_rounds = total_steps / reference.update_every_n_steps
# e.g. for communication self preference scheduling


# ---------------------------------- Data ----------------------------------- #
#
tokenizer:
  _component_: ppotune.tokenizers.mistral2_tokenizer
  path: ${prefix}/models/${model}/tokenizer.model
  max_seq_len: 2500

dataset:
  _component_: ppotune.data.sets.tldr_dataset
  source: RLHF-And-Friends/tldr-ppo
  split: train

dataloader:
  _component_: ppotune.data.loaders.distributed_dataloader
  batch_size: 64
  num_steps: 26
  num_epochs: 6

evaluation_dataset:
  _component_: ppotune.data.sets.tldr_dataset
  source: RLHF-And-Friends/tldr-ppo
  split: validation

evaluation_dataloader:
  _component_: ppotune.data.loaders.dataloader
  batch_size: 8 # has to be the same as forward_batch_size
  num_steps: 16

evaluator:
  _component_: ppotune.evaluation.reference_completion_evaluator
  arbiter:
    _component_: ppotune.arbiters.tldr_arbiter
    base_url: http://localhost:8000/v1
    model: /data/models/judge
  every_n_steps: 13

# PPO Optimization Batch Parameters
ppo_epochs: 2
ppo_batch_size: 32
gradient_accumulation_steps: 4
forward_batch_size: 8


# --------------------------------- Policy ---------------------------------- #
#
policy:
  _component_: ppotune.model.GenerativeLoRAModel
  generation_batch_size: ${forward_batch_size}
  max_response_len: 58
  score_based_protocol: 0.7
  top_k: null
  model:
    _component_: torchtune.models.mistral.lora_mistral_7b
    # (Q)LoRA
    lora_attn_modules: ['q_proj', 'k_proj', 'v_proj', 'output_proj']
    apply_lora_to_mlp: True
    apply_lora_to_output: False
    lora_rank: 64  # higher increases accuracy and memory
    lora_alpha: 16  # usually alpha=2*rank
    lora_dropout: 0.0
    quantize_base: False # stands for 'Q' in QLoRA
  ckpt:
    _component_: torchtune.training.FullModelHFCheckpointer
    checkpoint_dir: ${prefix}/models/${model}/
    checkpoint_files:
      [
        "model-00001-of-00003.safetensors",
        "model-00002-of-00003.safetensors",
        "model-00003-of-00003.safetensors",
      ]
    # this is the only place where you should update `recipe_checkpoint` if resuming training
    recipe_checkpoint: null
    output_dir: ${output_dir}/policy
    model_type: MISTRAL


# ---------------------------- Advantage Model ------------------------------ #
#
advantage:
  _component_: ppotune.advantage.GAE
  gamma: 1
  lmbda: 0.95
  value_coeff: 0.1
  value_clip_range: 0.2
  reward:
    _component_: ppotune.reward.PerTokenKLPenalizedRewardModel
    min_response_len: 18      # would penalize generations shorter than
    penalise_no_eos: True     # would penalize generations with no eos
    reward_penalty: -3        # penalty value
    kl_coeff: 0.1
    scorer:
      _component_: ppotune.model.LoRAModel

      ckpt:
        _component_: torchtune.training.FullModelHFCheckpointer
        checkpoint_dir: ${prefix}/models/${reward}/
        checkpoint_files:
          [
            "model-00001-of-00003.safetensors",
            "model-00002-of-00003.safetensors",
            "model-00003-of-00003.safetensors",
          ]
        output_dir: ${output_dir}/scorer
        model_type: REWARD

      model:
        _component_: torchtune.models.mistral.lora_mistral_reward_7b
        # (Q)LoRA
        lora_attn_modules: ['q_proj', 'k_proj', 'v_proj', 'output_proj']
        apply_lora_to_mlp: True
        apply_lora_to_output: = True
        lora_rank: 16
        lora_alpha: 32
        lora_dropout: 0.0
        quantize_base: False


# ---------------------------- Reference Model ------------------------------ #
#
reference:
  _component_: ppotune.comm.distributed_policy_mixture
  update_every_n_steps: 13
  protocol:
    _component_: ppotune.comm.static_protocol
    weightage:
      _component_: ppotune.comm.uniform_weightage
      self_preference:
        _component_: ppotune.volatile.linearly_scheduled
        start: 1.0
        end: 0.0
        steps: 13 # num_communcation_rounds (3) + initialization


# --------------------------------- Other ----------------------------------- #
#
optimizer:
  _component_: bitsandbytes.optim.PagedAdamW
  lr: 1e-4

dtype: bf16 # | fp32 | fp16 is not supported

kl_penalty:
  _component_: ppotune.loss.KLPenalty
  coeff: 0.0

# PPO Loss
# clipping hyperparameter
epsilon: 0.2

# Logging
wandb_logger:
  dir: ${prefix}
  entity: RADFAN
  project: ${project}
  group: ${group}
  name: ${model}-${run}
